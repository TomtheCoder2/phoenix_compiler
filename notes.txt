Input:

        let x: int = 10;
        let y: float = 2.5; // Keep floats too
        let is_greater: bool = x > 5;

        print(x * 3); // int print: 30
        print(y / 2.0); // float print: 1.25
        print(2.3);
        print(10);
        print(is_greater); // bool print: true
        print(x == 10); // bool print: true
        print(x < 9);  // bool print: false

        // Type mismatch (will error in current codegen):
        // print(x + y);
    
AST:
Program {
    statements: [
        LetBinding {
            name: "x",
            type_ann: Some(
                Int,
            ),
            value: IntLiteral(
                10,
            ),
        },
        LetBinding {
            name: "y",
            type_ann: Some(
                Float,
            ),
            value: FloatLiteral(
                2.5,
            ),
        },
        LetBinding {
            name: "is_greater",
            type_ann: Some(
                Bool,
            ),
            value: ComparisonOp {
                op: GreaterThan,
                left: Variable(
                    "x",
                ),
                right: IntLiteral(
                    5,
                ),
            },
        },
        ExpressionStmt(
            FunctionCall {
                name: "print",
                args: [
                    BinaryOp {
                        op: Multiply,
                        left: Variable(
                            "x",
                        ),
                        right: IntLiteral(
                            3,
                        ),
                    },
                ],
            },
        ),
        ExpressionStmt(
            FunctionCall {
                name: "print",
                args: [
                    BinaryOp {
                        op: Divide,
                        left: Variable(
                            "y",
                        ),
                        right: FloatLiteral(
                            2.0,
                        ),
                    },
                ],
            },
        ),
        ExpressionStmt(
            FunctionCall {
                name: "print",
                args: [
                    FloatLiteral(
                        2.3,
                    ),
                ],
            },
        ),
        ExpressionStmt(
            FunctionCall {
                name: "print",
                args: [
                    IntLiteral(
                        10,
                    ),
                ],
            },
        ),
        ExpressionStmt(
            FunctionCall {
                name: "print",
                args: [
                    Variable(
                        "is_greater",
                    ),
                ],
            },
        ),
        ExpressionStmt(
            FunctionCall {
                name: "print",
                args: [
                    ComparisonOp {
                        op: Equal,
                        left: Variable(
                            "x",
                        ),
                        right: IntLiteral(
                            10,
                        ),
                    },
                ],
            },
        ),
        ExpressionStmt(
            FunctionCall {
                name: "print",
                args: [
                    ComparisonOp {
                        op: LessThan,
                        left: Variable(
                            "x",
                        ),
                        right: IntLiteral(
                            9,
                        ),
                    },
                ],
            },
        ),
    ],
}
Optimizer changed function 'main'

--- LLVM IR (Module) ---
Emitting object file to: output.o
Successfully emitted object file: output.o

--- Linking ---
Attempting to link output.o with library target/debug/libtoylang_compiler.a using clang
